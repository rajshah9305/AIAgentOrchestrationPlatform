// Prisma Schema for AI Agent Orchestrator
// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(USER)
  
  // Authentication
  password  String?
  emailVerified DateTime?
  
  // Profile
  bio       String?
  timezone  String?
  language  String   @default("en")
  
  // Preferences
  preferences Json?
  
  // Relations
  agents        Agent[]
  executions    Execution[]
  apiKeys       ApiKey[]
  webhooks      Webhook[]
  configurations Configuration[]
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// API Key management
model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  hashedKey   String    @unique
  
  // Permissions
  permissions Json?
  scopes      String[]
  
  // Usage tracking
  lastUsedAt  DateTime?
  usageCount  Int       @default(0)
  
  // Rate limiting
  rateLimit   Int?
  ratePeriod  String?
  
  // Lifecycle
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Audit
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("api_keys")
}

// AI Agent definitions
model Agent {
  id          String      @id @default(cuid())
  name        String
  description String?
  
  // Framework and configuration
  framework   Framework
  configuration Json
  
  // Metadata
  tags        String[]
  category    String?
  version     String      @default("1.0.0")
  
  // Status and lifecycle
  status      AgentStatus @default(IDLE)
  isActive    Boolean     @default(true)
  isPublic    Boolean     @default(false)
  
  // Performance metrics
  totalExecutions     Int @default(0)
  successfulExecutions Int @default(0)
  failedExecutions    Int @default(0)
  avgExecutionTime    Float?
  totalTokensUsed     Int @default(0)
  totalCost          Float @default(0)
  
  // Timestamps
  lastExecutedAt DateTime?
  deployedAt     DateTime?
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions  Execution[]
  
  // Audit
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("agents")
}

enum Framework {
  AUTOGEN
  METAGPT
  CREWAI
  AUTOGPT
  BABYAGI
  LANGGRAPH
  CAMELAI
  AGENTVERSE
  OPENAGENTS
  MINIAGI
  ORCA
  CEREBRAS
  CEREBRAS_AUTOGEN
}

enum AgentStatus {
  IDLE
  RUNNING
  PAUSED
  ERROR
  DEPLOYING
  STOPPED
}

// Execution tracking
model Execution {
  id          String          @id @default(cuid())
  
  // Input and output
  input       Json
  output      Json?
  error       String?
  
  // Execution details
  status      ExecutionStatus @default(PENDING)
  trigger     ExecutionTrigger @default(MANUAL)
  environment ExecutionEnvironment @default(DEVELOPMENT)
  
  // Performance metrics
  duration        Int?    // milliseconds
  tokensUsed      Int?
  cost            Float?
  memoryUsed      Int?    // MB
  cpuUsed         Float?  // percentage
  
  // Timestamps
  startedAt       DateTime?
  completedAt     DateTime?
  
  // Relations
  agentId         String
  agent           Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs            ExecutionLog[]
  
  // Metadata
  metadata        Json?
  
  // Audit
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("executions")
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

enum ExecutionTrigger {
  MANUAL
  SCHEDULED
  WEBHOOK
  API
}

enum ExecutionEnvironment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

// Execution logging
model ExecutionLog {
  id          String    @id @default(cuid())
  level       LogLevel
  message     String
  timestamp   DateTime  @default(now())
  metadata    Json?
  
  // Relations
  executionId String
  execution   Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  
  @@map("execution_logs")
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

// Configuration templates
model Configuration {
  id          String    @id @default(cuid())
  name        String
  description String?
  
  // Configuration data
  framework   Framework
  configuration Json
  
  // Template properties
  isTemplate  Boolean   @default(false)
  isPublic    Boolean   @default(false)
  category    String?
  tags        String[]
  
  // Usage tracking
  usageCount  Int       @default(0)
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Audit
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("configurations")
}

// Webhook management
model Webhook {
  id          String      @id @default(cuid())
  url         String
  events      String[]
  secret      String?
  
  // Configuration
  isActive    Boolean     @default(true)
  retries     Int         @default(3)
  timeout     Int         @default(30000) // milliseconds
  
  // Headers and authentication
  headers     Json?
  
  // Tracking
  lastTriggeredAt DateTime?
  totalCalls      Int @default(0)
  successfulCalls Int @default(0)
  failedCalls     Int @default(0)
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveries  WebhookDelivery[]
  
  // Audit
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("webhooks")
}

// Webhook delivery tracking
model WebhookDelivery {
  id          String    @id @default(cuid())
  
  // Request details
  event       String
  payload     Json
  headers     Json?
  
  // Response details
  status      Int?
  response    String?
  duration    Int?      // milliseconds
  
  // Retry information
  attempt     Int       @default(1)
  success     Boolean   @default(false)
  
  // Relations
  webhookId   String
  webhook     Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  // Audit
  createdAt   DateTime  @default(now())
  
  @@map("webhook_deliveries")
}

// System metrics and analytics
model SystemMetric {
  id          String    @id @default(cuid())
  name        String
  value       Float
  unit        String?
  tags        Json?
  timestamp   DateTime  @default(now())
  
  @@map("system_metrics")
}

// Background jobs
model Job {
  id          String    @id @default(cuid())
  type        String
  data        Json
  
  // Status tracking
  status      JobStatus @default(PENDING)
  progress    Int       @default(0)
  
  // Execution details
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  
  // Timing
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  
  // Results
  result      Json?
  error       String?
  
  // Priority and queue
  priority    Int       @default(0)
  queue       String    @default("default")
  
  // Audit
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("jobs")
}

enum JobStatus {
  PENDING
  ACTIVE
  COMPLETED
  FAILED
  DELAYED
  WAITING
}

// Audit log for security and compliance
model AuditLog {
  id          String    @id @default(cuid())
  
  // Event details
  action      String
  resource    String
  resourceId  String?
  
  // User context
  userId      String?
  userEmail   String?
  userAgent   String?
  ipAddress   String?
  
  // Request details
  method      String?
  path        String?
  
  // Data
  oldValues   Json?
  newValues   Json?
  metadata    Json?
  
  // Audit
  timestamp   DateTime  @default(now())
  
  @@map("audit_logs")
}

// Indexes for performance
// Add these after model definitions

// User indexes
@@index([User.email])
@@index([User.role])
@@index([User.createdAt])

// Agent indexes
@@index([Agent.userId])
@@index([Agent.framework])
@@index([Agent.status])
@@index([Agent.isActive])
@@index([Agent.createdAt])
@@index([Agent.lastExecutedAt])

// Execution indexes
@@index([Execution.agentId])
@@index([Execution.userId])
@@index([Execution.status])
@@index([Execution.trigger])
@@index([Execution.environment])
@@index([Execution.startedAt])
@@index([Execution.createdAt])

// Log indexes
@@index([ExecutionLog.executionId])
@@index([ExecutionLog.level])
@@index([ExecutionLog.timestamp])

// Configuration indexes
@@index([Configuration.userId])
@@index([Configuration.framework])
@@index([Configuration.isTemplate])
@@index([Configuration.isPublic])

// Webhook indexes
@@index([Webhook.userId])
@@index([Webhook.isActive])

// Job indexes
@@index([Job.status])
@@index([Job.type])
@@index([Job.queue])
@@index([Job.scheduledAt])
@@index([Job.createdAt])

// Audit log indexes
@@index([AuditLog.userId])
@@index([AuditLog.action])
@@index([AuditLog.resource])
@@index([AuditLog.timestamp])