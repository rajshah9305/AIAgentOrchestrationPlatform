// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  image             String?
  emailVerified     DateTime?
  role              UserRole  @default(USER)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  agents            Agent[]
  executions        Execution[]
  savedConfigurations SavedConfiguration[]
  auditLogs         AuditLog[]
  apiKeys           ApiKey[]
  webhooks          Webhook[]
  notifications     Notification[]

  @@map("users")
}

model Agent {
  id              String      @id @default(cuid())
  name            String
  description     String?
  framework       Framework
  configuration   Json
  status          AgentStatus @default(IDLE)
  isActive        Boolean     @default(true)
  userId          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Metrics
  totalExecutions Int         @default(0)
  successfulExecutions Int    @default(0)
  failedExecutions Int        @default(0)
  avgExecutionTime Float?
  lastExecutedAt  DateTime?

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions      Execution[]

  @@map("agents")
}

model Execution {
  id            String          @id @default(cuid())
  agentId       String
  userId        String
  status        ExecutionStatus @default(PENDING)
  input         Json?
  output        Json?
  error         String?
  configuration Json?
  environment   String          @default("development")
  trigger       String          @default("manual")
  startedAt     DateTime        @default(now())
  completedAt   DateTime?
  duration      Int?            // in milliseconds
  tokensUsed    Int?
  cost          Float?
  metadata      Json?

  // Relations
  agent         Agent           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs          ExecutionLog[]

  @@map("executions")
}

model ExecutionLog {
  id          String    @id @default(cuid())
  executionId String
  level       LogLevel
  message     String
  timestamp   DateTime  @default(now())
  metadata    Json?

  // Relations
  execution   Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_logs")
}

model SavedConfiguration {
  id            String   @id @default(cuid())
  name          String
  description   String?
  framework     Framework
  configuration Json
  isTemplate    Boolean  @default(false)
  isPublic      Boolean  @default(false)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_configurations")
}

model AuditLog {
  id           String      @id @default(cuid())
  userId       String
  action       AuditAction
  resourceType String
  resourceId   String?
  ipAddress    String?
  userAgent    String?
  details      Json?
  risk         String?     @default("low")
  createdAt    DateTime    @default(now())

  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model ApiKey {
  id           String    @id @default(cuid())
  name         String
  keyHash      String    @unique
  permissions  String[]  // Array of permission strings
  isActive     Boolean   @default(true)
  lastUsedAt   DateTime?
  expiresAt    DateTime?
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Framework {
  id            String   @id @default(cuid())
  name          String   @unique
  displayName   String
  description   String
  category      String
  difficulty    String
  rating        Float?
  growth        Int?
  features      String[]
  tags          String[]
  isPopular     Boolean  @default(false)
  configSchema  Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("frameworks")
}

model Webhook {
  id          String   @id @default(cuid())
  url         String
  events      String[] // Array of event types
  secret      String
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        WebhookLog[]

  @@map("webhooks")
}

model WebhookLog {
  id          String   @id @default(cuid())
  webhookId   String
  eventType   String
  payload     Json
  response    Json?
  statusCode  Int?
  error       String?
  duration    Int?     // in milliseconds
  createdAt   DateTime @default(now())

  // Relations
  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@map("webhook_logs")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  data        Json?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Framework {
  AUTOGEN
  METAGPT
  CREWAI
  AUTOGPT
  BABYAGI
  LANGGRAPH
  CAMELAI
  AGENTVERSE
  OPENAGENTS
  MINIAGI
  ORCA
  CEREBRAS
  CEREBRAS_AUTOGEN
}

enum AgentStatus {
  IDLE
  RUNNING
  PAUSED
  ERROR
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum AuditAction {
  USER_LOGIN
  USER_LOGOUT
  AGENT_CREATED
  AGENT_UPDATED
  AGENT_DELETED
  EXECUTION_STARTED
  EXECUTION_COMPLETED
  EXECUTION_FAILED
  EXECUTION_CANCELLED
  CONFIGURATION_SAVED
  CONFIGURATION_DELETED
  API_KEY_CREATED
  API_KEY_REVOKED
  WEBHOOK_REGISTERED
  WEBHOOK_DELETED
  SYSTEM_ALERT
}