name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # Frontend CI Jobs
  frontend-lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run tests
        working-directory: ./frontend
        run: npm run test:ci

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend

  frontend-build:
    runs-on: ubuntu-latest
    needs: frontend-lint-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: https://api.example.com
          NEXT_PUBLIC_WS_URL: wss://api.example.com
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next

  # Backend CI Jobs
  backend-lint-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Run type check
        working-directory: ./backend
        run: npm run type-check

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          npm run db:generate
          npm run db:push

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test
        run: npm run test:ci

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend

  backend-build:
    runs-on: ubuntu-latest
    needs: backend-lint-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npm run db:generate

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (Frontend)
        working-directory: ./frontend
        run: npm audit --audit-level moderate

      - name: Run npm audit (Backend)
        working-directory: ./backend
        run: npm audit --audit-level moderate

  # Docker Build Test
  docker-build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: ai-agent-orchestrator-frontend:test

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: ai-agent-orchestrator-backend:test

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/.next

      - name: Download backend build
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/integration_test_db
        run: |
          npm run db:generate
          npm run db:push

      - name: Start backend
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/integration_test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: integration-test-secret
          NODE_ENV: test
          PORT: 3002
        run: npm start &

      - name: Wait for backend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3002/health; do sleep 1; done'

      - name: Start frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3002
          NEXT_PUBLIC_WS_URL: ws://localhost:3002
        run: npm start &

      - name: Wait for frontend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

      - name: Run E2E tests
        run: |
          # Add your E2E test commands here
          echo "E2E tests would run here"

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build, security-scan, docker-build-test, integration-tests]
    if: always()
    steps:
      - name: Notify Slack on success
        if: ${{ needs.frontend-build.result == 'success' && needs.backend-build.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ AI Agent Orchestrator CI Pipeline passed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ needs.frontend-build.result == 'failure' || needs.backend-build.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ AI Agent Orchestrator CI Pipeline failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}