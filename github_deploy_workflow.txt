name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'

jobs:
  # Build artifacts for deployment
  build:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Frontend
        if: steps.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Upload frontend build
        if: steps.changes.outputs.frontend == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: frontend-production-build
          path: frontend/.next

      - name: Build Backend
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: |
          npm ci
          npm run db:generate
          npm run build

      - name: Upload backend build
        if: steps.changes.outputs.backend == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: backend-production-build
          path: backend/dist

  # Deploy Frontend to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.frontend-changed == 'true'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Frontend deployed to: ${{ steps.deploy.outputs.url }}`
            })

  # Deploy Backend to Railway
  deploy-backend:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.backend-changed == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd backend
          railway login --token $RAILWAY_TOKEN
          railway up --service backend

      - name: Run database migrations
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd backend
          railway login --token $RAILWAY_TOKEN
          railway run npm run db:deploy

  # Deploy with Docker (Alternative deployment method)
  deploy-docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ai-agent-orchestrator-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ai-agent-orchestrator-frontend:${{ github.sha }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ai-agent-orchestrator-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/ai-agent-orchestrator-backend:${{ github.sha }}

  # Post-deployment health checks
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && (needs.deploy-frontend.result == 'success' || needs.deploy-backend.result == 'success')
    steps:
      - name: Wait for deployment stabilization
        run: sleep 30

      - name: Check frontend health
        if: needs.deploy-frontend.result == 'success'
        run: |
          curl -f ${{ secrets.FRONTEND_URL }} || exit 1

      - name: Check backend health
        if: needs.deploy-backend.result == 'success'
        run: |
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

      - name: Run smoke tests
        run: |
          # Add your post-deployment smoke tests here
          echo "Running smoke tests..."
          # curl -f ${{ secrets.BACKEND_URL }}/api/health
          # curl -f ${{ secrets.FRONTEND_URL }}

  # Update deployment status
  deployment-status:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, health-check]
    if: always()
    steps:
      - name: Update deployment status - Success
        if: needs.health-check.result == 'success'
        run: |
          echo "Deployment successful!"
          # You can add additional success actions here

      - name: Update deployment status - Failure
        if: needs.health-check.result == 'failure'
        run: |
          echo "Deployment failed!"
          exit 1

      - name: Notify team on Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üöÄ AI Agent Orchestrator Deployment Status: ${{ job.status }}
            Frontend: ${{ needs.deploy-frontend.result }}
            Backend: ${{ needs.deploy-backend.result }}
            Health Check: ${{ needs.health-check.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [deploy-frontend, deploy-backend, health-check]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Rollback frontend
        if: needs.deploy-frontend.result == 'failure'
        run: |
          npm install -g vercel@latest
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }}

      - name: Rollback backend
        if: needs.deploy-backend.result == 'failure'
        run: |
          npm install -g @railway/cli
          # Add Railway rollback commands
          echo "Manual rollback required for Railway"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          text: '‚ö†Ô∏è AI Agent Orchestrator deployment rolled back due to failures'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}